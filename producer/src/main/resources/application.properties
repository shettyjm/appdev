# Quarkus config
quarkus.ssl.native=true
quarkus.http.port=9090

# Configure the Kafka sink (we write to it)
mp.messaging.outgoing.temperature-values.connector=smallrye-kafka
mp.messaging.outgoing.temperature-values.topic = temperature-values
mp.messaging.outgoing.temperature-values.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.temperature-values.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.water-consumption-values.connector=smallrye-kafka
# mp.messaging.outgoing.weather-stations.topic = weather-stations
mp.messaging.outgoing.water-consumption-values.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.water-consumption-values.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.hydrologic-regions.connector=smallrye-kafka
mp.messaging.outgoing.hydrologic-regions.topic = temperature-values
mp.messaging.outgoing.hydrologic-regions.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.hydrologic-regions.value.serializer=org.apache.kafka.common.serialization.StringSerializer

mp.messaging.outgoing.weather-stations.connector=smallrye-kafka
mp.messaging.outgoing.weather-stations.topic = weather-stations
mp.messaging.outgoing.weather-stations.key.serializer=org.apache.kafka.common.serialization.IntegerSerializer
mp.messaging.outgoing.weather-stations.value.serializer=org.apache.kafka.common.serialization.StringSerializer





# Configure docker config
quarkus.container-image.builder=jib
quarkus.kubernetes.deployment-target=kubernetes
quarkus.container-image.build=false
quarkus.container-image.push=false

## dev profile using user defined environment variables that uses SASL/OAUTHBEARER
## ./mvnw quarkus:dev 
## ./mvnw package -Dquarkus.profile=dev

%dev.kafka.bootstrap.servers=${BOOTSTRAP_SERVER}
%dev.kafka.security.protocol=SASL_SSL

%dev.kafka.sasl.mechanism=OAUTHBEARER
%dev.kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  oauth.client.id="${CLIENT_ID}" \
  oauth.client.secret="${CLIENT_SECRET}" \
  oauth.token.endpoint.uri="${OAUTH_TOKEN_ENDPOINT_URI}" ;
%dev.kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler
