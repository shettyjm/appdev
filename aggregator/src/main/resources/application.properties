# Quarkus config
quarkus.ssl.native=true
#quarkus.http.port=9090


# Configure docker config
quarkus.container-image.builder=jib
quarkus.kubernetes.deployment-target=kubernetes
quarkus.container-image.build=false
quarkus.container-image.push=false
quarkus.kafka-streams.application-id=${APP_ID}



## dev profile using user defined environment variables that uses SASL/OAUTHBEARER
## ./mvnw quarkus:dev 
## ./mvnw package -Dquarkus.profile=dev
%dev.quarkus.kafka-streams.topics=hydrologic-regions,water-consumption-values,water-consumption-aggregated
%dev.kafka-streams.application-id=${APP_ID}

%dev.quarkus.kafka.bootstrap.servers=${BOOTSTRAP_SERVER}
%dev.kafka.security.protocol=SASL_SSL

%dev.kafka.sasl.mechanism=OAUTHBEARER
%dev.kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  oauth.client.id="${CLIENT_ID}" \
  oauth.client.secret="${CLIENT_SECRET}" \
  oauth.token.endpoint.uri="${OAUTH_TOKEN_ENDPOINT_URI}" ;
%dev.kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler


%dev.kafka-streams.cache.max.bytes.buffering=10240
%dev.kafka-streams.commit.interval.ms=1000
%dev.kafka-streams.metadata.max.age.ms=500
%dev.kafka-streams.auto.offset.reset=earliest
%dev.kafka-streams.metrics.recording.level=DEBUG
## test profile using user defined environment variables that uses SASL/OAUTHBEARER
## ./mvnw quarkus:test 
## ./mvnw package -Dquarkus.profile=test
%test.quarkus.kafka-streams.topics=weather-stations,temperature-values
%test.kafka.bootstrap.servers=${BOOTSTRAP_SERVER}
%test.kafka.security.protocol=SASL_SSL

%test.kafka.sasl.mechanism=OAUTHBEARER
%test.kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  oauth.client.id="${CLIENT_ID}" \
  oauth.client.secret="${CLIENT_SECRET}" \
  oauth.token.endpoint.uri="${OAUTH_TOKEN_ENDPOINT_URI}" ;
%test.kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler
%test.kafka-streams.application-id=${APP_ID}

%prod.quarkus.kafka-streams.topics=hydrologic-regions,water-consumption-values,water-consumption-aggregated
%prod.kafka.bootstrap.servers=${BOOTSTRAP_SERVER}
%prod.kafka.security.protocol=SASL_SSL

%prod.kafka.sasl.mechanism=OAUTHBEARER
%prod.kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  oauth.client.id="${CLIENT_ID}" \
  oauth.client.secret="${CLIENT_SECRET}" \
  oauth.token.endpoint.uri="${OAUTH_TOKEN_ENDPOINT_URI}" ;
%prod.kafka-streams.application-id=${APP_ID}
%prod.kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler

# pass-through options
kafka-streams.cache.max.bytes.buffering=10240
kafka-streams.commit.interval.ms=1000
kafka-streams.metadata.max.age.ms=500
kafka-streams.auto.offset.reset=earliest
kafka-streams.metrics.recording.level=DEBUG


kafka.bootstrap.servers=${BOOTSTRAP_SERVER}
kafka.security.protocol=SASL_SSL

kafka.sasl.mechanism=OAUTHBEARER
kafka.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  oauth.client.id="${CLIENT_ID}" \
  oauth.client.secret="${CLIENT_SECRET}" \
  oauth.token.endpoint.uri="${OAUTH_TOKEN_ENDPOINT_URI}" ;
kafka.sasl.login.callback.handler.class=io.strimzi.kafka.oauth.client.JaasClientOauthLoginCallbackHandler
kafka-streams.topics=hydrologic-regions,water-consumption-values,water-consumption-aggregated
kafka-streams.application-id=${APP_ID}