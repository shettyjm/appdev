# This is a basic workflow to help you get started with Actions trigger 1
#test

name: CI-hcdemo-frontend-pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
#   pull_request:
#     branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  frontend-ang_build:
    # The type of runner that the job will run on
    
    strategy:
      matrix:
        java: [11]
        os: [ubuntu-latest]
        nodejs-version: [12.x]
        
        docker-version: [19.09]
        docker-channel: [stable]
        
    name: node ${{ matrix.nodejs-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      HASH: $(git rev-parse --short "$GITHUB_SHA")
      BRANCH: ${GITHUB_REF##*/}
      SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
     
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout the code
        uses: actions/checkout@v2
      # - uses: google-github-actions/setup-gcloud@master
      #   with:
      #     service_account_key: ${{ secrets.GCR_DEVOPS_SERVICE_ACCOUNT_KEY }}
      #     project_id: ${{ secrets.PROJECT_ID }}
      #     export_default_credentials: true
        
      - name: Setup Docker ${{ matrix.docker-channel }} ${{ matrix.docker-version }}
        uses: docker-practice/actions-setup-docker@master
        with:
          docker_version: ${{ matrix.docker-version }}
          docker_channel: ${{ matrix.docker-channel }}
      # Setup gcloud CLI
         
      # - name: GCR Auth 
      #   run: |-
      #     gcloud auth configure-docker -q   
     
      
      - name: Cache node modules
        uses: actions/cache@v1
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Node ${{ matrix.node-version }} build production
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Set commit tag sha1 outputs
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      
      - name: list docker images
        run:  docker images 
      - name: build,tag, push container image to quay.io push
        run : |
           cd part2/cndreality
           docker build . -t quay.io/jmaira/appdev_apidemofe:${{ steps.vars.outputs.sha_short }}
           docker images 
           docker login -u=${{ secrets.DOCKER_USER }} -p=${{ secrets.DOCKER_PASSWORD }} quay.io
           docker push quay.io/jmaira/appdev_apidemofe:${{ steps.vars.outputs.sha_short }}
        
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v1
        with:
            kustomize-version: "3.8.7"
      - name: new docker image tag for kustomize
        env:
          NEW_TAG: ${{ steps.vars.outputs.sha_short }}
        run: |
          WORK_DIR=$(pwd)
          echo $WORK_DIR
          KUSTOMIZE_HOME=$(mktemp -d)
          echo $KUSTOMIZE_HOME
          ls $KUSTOMIZE_HOME
          cp $WORK_DIR/devops/apidemo/frontend/cndportal-svc-deploy.yaml $KUSTOMIZE_HOME/deploy.yaml
          cd $KUSTOMIZE_HOME
          kustomize create --resources deploy.yaml
          kustomize edit set image "quay.io/jmaira/appdev_apidemofe"="quay.io/jmaira/appdev_apidemofe:"$NEW_TAG
          cd $WORK_DIR
          kustomize build $KUSTOMIZE_HOME > $WORK_DIR/devops/apidemo/frontend/cndportal-svc-deploy.yaml
      - name: Commit files
        run: |
          cd $(pwd)
          ls -ltra
         
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull
          git add devops/apidemo/frontend/cndportal-svc-deploy.yaml
          git commit -am "Bump docker tag to ${NEW_TAG} "
          git push origin main
        env :
          REPO_KEY :  ${{ secrets.GITHUB_TOKEN}}
          USERNAME : github-actions
        
      - name: Run a one-line script
        run: echo Succesffuly built fronend portal. ready for deployment using argocd!

      # Runs a set of commands using the runners shell key update trigger again
      # - name: Run a multi-line script
      #   run: |
      #     echo Add other actions to build,
      #     echo test, and deploy your project.
      
